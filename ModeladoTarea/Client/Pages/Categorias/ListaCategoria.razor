    @page "/Categorias"
    @inject IHttpServicio http

<PageTitle>Lista de categorias</PageTitle>

    <body>
    <h3 class="text-center header">Lista de Categorias</h3>

        <a class="btn btn-primary" href="/Categorias/Agregar">Crear categoria</a>

    <div class="insquare">

        <div class="table-responsive rounded-3">

            <table class="table table-striped table-hover table-bordered text-center">

                <thead id="table-headers">

                    <tr>
                        <th> Categoria </th>
                        <th>  </th>
                        <th>  </th>
                    </tr>
                </thead>

                <tbody>

                    @if (error)
                    {

                    }
                    else
                    {
                        @if (categorias == null)
                        {
                            <tr> Cargando....</tr>
                        }
                        else if (categorias.Count == 0)
                        {
                            <tr> No existen datos</tr>
                        }
                        else
                        {
                            @foreach (var item in categorias)
                            {
                                <tr>
                                    <td>@item.categoria</td>
                                    <td>
                                        <a class="btn btn-primary table-button"
                                        @onclick="() => OpenModifCateg(item.id)">
                                            Modificar
                                        </a>
                                    </td>
                                    <td>
                                        <i class='bx bx-trash trash-button table-button' @onclick="()=>Eliminar(item)"></i>

                                    </td>
                                </tr>

                            }
                        }
                    }
                </tbody>

            </table>


        </div>



    </div>


    <div class="d-flex">

        <button type="button" class="btn btn-info botones"
        @onclick="() => OpenAgregarCateg()">
            Nuevo
        </button>
    </div>

        <Confirmar @ref="confirmar"
                    verCancelar="true"
                    verOk="true"
                    textOk="Aceptar"
                    Titulo="Borrar Categoria"
                    onCancel="Cancelar"
                    onConfirm="Borrar">

            <div>
                <p>Está por borrar la categoria @CategoriaBorrar.categoria</p>
                <br />
                <p>¿Está seguro que desea continuar?</p>
            </div>
        </Confirmar>

        @if (AgregarCategOpen)
    {
        <ModalAgregarCateg

            OnClose="@OnAgregarCategClose">

        </ModalAgregarCateg>
    }

    @if (ModificarCategOpen)
    {
        <ModalModifCateg OnClose="@OnModifCategClose"
            productoId="selectedItemToEditId">

        </ModalModifCateg>
    }

    </body>



@code {
    Confirmar confirmar;
    List<Categoria>? categorias;
    bool error = false;
    string mensaje = "";
    Categoria CategoriaBorrar;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Leer();
    }

    private async Task Leer()
    {
        categorias = null;

        var respuesta = await http.Get<List<Categoria>>("api/Categoria");

        error = respuesta.Error;

        if (!respuesta.Error)
        {
            categorias = respuesta.Respuesta;
        }
        else
        {
            mensaje = await respuesta.ObtenerError();
        }
    }

    private async Task Eliminar(Categoria categoriaBorrar)
    {
       CategoriaBorrar = categoriaBorrar;
        confirmar.Ver();
    }

    private void Cancelar()
    {
        confirmar.Ocultar();
        CategoriaBorrar = null;
    }

    private async Task Borrar()
    {
        var respuesta = await http.Delete($"api/Categoria/{CategoriaBorrar.id}");
        if (respuesta.Error)
        {
            var body = "Error, no se puede borrar la categoria";
        }

        Cancelar();
        await Leer();
    }
    public bool AgregarCategOpen { get; set; }

    public bool ModificarCategOpen { get; set; }

    private void OpenAgregarCateg()
    {
        AgregarCategOpen = true;
        StateHasChanged();

    }

    private async Task OnAgregarCategClose(bool accepted)
    {
        ModificarCategOpen = false;
        StateHasChanged();
        await Leer();
    }

    int selectedItemToEditId = -1;

    private void OpenModifCateg(int itemId)
    {
        selectedItemToEditId = itemId;
        ModificarCategOpen = true;
        StateHasChanged();
    }

    private async Task OnModifCategClose(bool accepted)
    {
        ModificarCategOpen = false;
        StateHasChanged();
        await Leer();
    }
 }
