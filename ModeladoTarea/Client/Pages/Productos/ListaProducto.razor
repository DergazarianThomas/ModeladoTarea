@page "/Productos"
@inject IHttpServicio http

<PageTitle> Lista de Productos</PageTitle>

<HeadContent>

    <meta charset="utf-8" />
    <meta content="width=device-width, initial-scale=1" name="viewport" />

</HeadContent>


<body>
    <h3 class="text-center header">Lista de Productos</h3>

    <div class="insquare">

        <div class="table-responsive rounded-3">

            <table class="table table-striped table-hover table-bordered text-center">

                <thead id="table-headers">

                    <tr>
                        <th class="col col-1">Codigo</th>
                        <th class="col col-2">Nombre</th>
                        <th class="col col-3">Categoria</th>
                        <th class="col col-4">Precio</th>
                        <th class="col col-5">Cantidad</th>
                        <th class="col col-6"></th>
                        <th class="col col-7"></th>
                    </tr>
                </thead>

                <tbody>

                    @if (error)
                    {

                    }
                    else
                    {
                        @if (productos == null)
                        {
                            <tr> Cargando....</tr>
                        }
                        else if (productos.Count == 0)
                        {
                            <tr> No existen datos</tr>
                        }
                        else
                        {
                            @foreach (var item in productos)
                            {
                                <tr>
                                    <td>@item.codigo</td>
                                    <td>@item.nombre</td>
                                    <td>@item.categoriaId</td>
                                    <td>$@item.precio</td>
                                    <td>@item.cantidad</td>
                                    <td>
                                        <a class="btn btn-primary"
                                        @onclick="() => OpenModifProd(item.id)">
                                            Modificar
                                        </a>
                                    </td>
                                    <td>
                                        <i class='bx bx-trash trash-button table-button' @onclick="()=>Eliminar(item)"></i>

                                    </td>
                                </tr>

                            }
                        }
                    }
                </tbody>

            </table>


        </div>

    </div>

    <div class="d-flex">

        <button type="button" class="btn btn-info botones"
        @onclick="() => OpenAgregarProd()">
            Nuevo
        </button>
    </div>


    <Confirmar @ref="confirmar"
                  verCancelar="true"
                  verOk="true"
                  textOk="Aceptar"
                  Titulo="Borrar Categoria"
                  onCancel="Cancelar"
                  onConfirm="Borrar">

        <div>
            <p>Está por borrar el producto @ProductoBorrar.nombre</p>
            <br />
            <p>¿Está seguro que desea continuar?</p>
        </div>
    </Confirmar>

    @if (AgregarProdOpen)
    {
        <ModalAgregarProd

            OnClose="@OnAgregarProdClose">

        </ModalAgregarProd>
    }

    @if (ModificarProdOpen)
    {
        <ModalModifProd OnClose="@OnModifProdClose"
            productoId="selectedItemToEditId">

        </ModalModifProd>
    }


</body>



@code {
    Confirmar confirmar;
    List<Producto>? productos;
    bool error = false;
    string mensaje = "";
    Producto ProductoBorrar;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Leer();
    }

    private async Task Leer()
    {
        productos = null;

        var respuesta = await http.Get<List<Producto>>("api/Producto");

        error = respuesta.Error;

        if (!respuesta.Error)
        {
            productos = respuesta.Respuesta;
        }
        else
        {
            mensaje = await respuesta.ObtenerError();
        }
    }

    private async Task Eliminar(Producto productoBorrar)
    {
        ProductoBorrar = productoBorrar;
        confirmar.Ver();
    }

    private void Cancelar()
    {
        confirmar.Ocultar();
        ProductoBorrar = null;
    }

    private async Task Borrar()
    {
        var respuesta = await http.Delete($"api/Producto/{ProductoBorrar.id}");
        if (respuesta.Error)
        {
            var body = "Error, no se puede borrar el producto";
        }

        Cancelar();
        await Leer();
    }

    public bool AgregarProdOpen { get; set; }

    public bool ModificarProdOpen { get; set; }

    private void OpenAgregarProd()
    {
        AgregarProdOpen = true;
        StateHasChanged();

    }

    private async Task OnAgregarProdClose(bool accepted)
    {
        AgregarProdOpen = false;
        StateHasChanged();
        await Leer();
    }

    int selectedItemToEditId = -1;

    private void OpenModifProd(int itemId)
    {
        selectedItemToEditId = itemId;
        ModificarProdOpen = true;
        StateHasChanged();
    }

    private async Task OnModifProdClose(bool accepted)
    {
        ModificarProdOpen = false;
        StateHasChanged();
        await Leer();
    }
}